version: "3.7"
services:
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email hello@dataroot.ca -d api.dataroot.ca --agree-tos
  nginx:
    container_name: nginx
    depends_on:
      - api
    image: nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
    networks:
      - production-network
    ports:
      - 80:80
      - 443:443
  api:
    image: tkudlicka/api-dataroot-ca
    restart: unless-stopped
    depends_on:
      - postgresql
      - redis
      - rabbitmq
    platform: linux/amd64
    container_name: api
    networks:
      - production-network
    environment:
      - ADDR=0.0.0.0:5002
      - RUST_LOG=debug
      - RUST_BACKTRACE=1
      - PAGE_SIZE_DEFAULT=12
      - PAGE_SIZE_MAX=120
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_NAME=postgres
      - DATABASE_HOST=postgresql
      - DATABASE_POOL_MAX=16
      - AMQP_ADDR=amqp://rabbitmq:rabbitmq@rabbitmq:5672
      - REDIS_URL=redis://redis/0
  postgresql:
    image: postgres
    restart: unless-stopped
    container_name: postgres
    ports:
      - "5432:5432"
    networks:
      - production-network
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - production-network
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmq
      - RABBITMQ_DEFAULT_PASS=rabbitmq
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 5s
      timeout: 5s
      retries: 5
  redis:
    image: redis
    restart: unless-stopped
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - production-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
networks:
  production-network:
    driver: bridge
